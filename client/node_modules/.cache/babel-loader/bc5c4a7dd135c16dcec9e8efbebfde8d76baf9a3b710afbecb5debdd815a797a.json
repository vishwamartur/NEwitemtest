{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nfunction useFetch(url, options) {\n  _s();\n  // Declare the state variables\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  // Use the useEffect hook to perform the fetch request\n  useEffect(() => {\n    // Set the loading state to true\n    setLoading(true);\n\n    // Use the fetch API to make the request\n    fetch(url, options).then(response => {\n      // Check if the response is ok\n      if (response.ok) {\n        // Convert the response to JSON\n        return response.json();\n      } else {\n        // Throw an error with the status text\n        throw new Error(response.statusText);\n      }\n    }).then(data => {\n      // Set the data state to the fetched data\n      setData(data);\n      // Set the loading state to false\n      setLoading(false);\n    }).catch(error => {\n      // Set the error state to the error message\n      setError(error.message);\n      // Set the loading state to false\n      setLoading(false);\n    });\n  }, [url, options]); // Pass the url and options as dependencies\n\n  // Return the state variables\n  return {\n    data,\n    loading,\n    error\n  };\n}\n_s(useFetch, \"v5inua6mCP5CN8A+E7ULWpnNGvM=\");\nexport default useFetch;","map":{"version":3,"names":["React","useState","useEffect","useFetch","url","options","_s","data","setData","loading","setLoading","error","setError","fetch","then","response","ok","json","Error","statusText","catch","message"],"sources":["C:/Users/vmarturx/OneDrive - Intel Corporation/Desktop/Itemtry/NEwitemtest/client/src/hooks/useFetch.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\n\r\nfunction useFetch(url, options) {\r\n  // Declare the state variables\r\n  const [data, setData] = useState(null);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  // Use the useEffect hook to perform the fetch request\r\n  useEffect(() => {\r\n    // Set the loading state to true\r\n    setLoading(true);\r\n\r\n    // Use the fetch API to make the request\r\n    fetch(url, options)\r\n      .then((response) => {\r\n        // Check if the response is ok\r\n        if (response.ok) {\r\n          // Convert the response to JSON\r\n          return response.json();\r\n        } else {\r\n          // Throw an error with the status text\r\n          throw new Error(response.statusText);\r\n        }\r\n      })\r\n      .then((data) => {\r\n        // Set the data state to the fetched data\r\n        setData(data);\r\n        // Set the loading state to false\r\n        setLoading(false);\r\n      })\r\n      .catch((error) => {\r\n        // Set the error state to the error message\r\n        setError(error.message);\r\n        // Set the loading state to false\r\n        setLoading(false);\r\n      });\r\n  }, [url, options]); // Pass the url and options as dependencies\r\n\r\n  // Return the state variables\r\n  return { data, loading, error };\r\n}\r\n\r\nexport default useFetch;\r\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAElD,SAASC,QAAQA,CAACC,GAAG,EAAEC,OAAO,EAAE;EAAAC,EAAA;EAC9B;EACA,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGP,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACQ,OAAO,EAAEC,UAAU,CAAC,GAAGT,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACU,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;;EAExC;EACAC,SAAS,CAAC,MAAM;IACd;IACAQ,UAAU,CAAC,IAAI,CAAC;;IAEhB;IACAG,KAAK,CAACT,GAAG,EAAEC,OAAO,CAAC,CAChBS,IAAI,CAAEC,QAAQ,IAAK;MAClB;MACA,IAAIA,QAAQ,CAACC,EAAE,EAAE;QACf;QACA,OAAOD,QAAQ,CAACE,IAAI,CAAC,CAAC;MACxB,CAAC,MAAM;QACL;QACA,MAAM,IAAIC,KAAK,CAACH,QAAQ,CAACI,UAAU,CAAC;MACtC;IACF,CAAC,CAAC,CACDL,IAAI,CAAEP,IAAI,IAAK;MACd;MACAC,OAAO,CAACD,IAAI,CAAC;MACb;MACAG,UAAU,CAAC,KAAK,CAAC;IACnB,CAAC,CAAC,CACDU,KAAK,CAAET,KAAK,IAAK;MAChB;MACAC,QAAQ,CAACD,KAAK,CAACU,OAAO,CAAC;MACvB;MACAX,UAAU,CAAC,KAAK,CAAC;IACnB,CAAC,CAAC;EACN,CAAC,EAAE,CAACN,GAAG,EAAEC,OAAO,CAAC,CAAC,CAAC,CAAC;;EAEpB;EACA,OAAO;IAAEE,IAAI;IAAEE,OAAO;IAAEE;EAAM,CAAC;AACjC;AAACL,EAAA,CAvCQH,QAAQ;AAyCjB,eAAeA,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}