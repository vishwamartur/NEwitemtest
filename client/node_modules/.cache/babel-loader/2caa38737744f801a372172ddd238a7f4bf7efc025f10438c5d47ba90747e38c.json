{"ast":null,"code":"// Import axios and local storage\nimport axios from 'axios';\n//import localStorageService from './local-storage.service';\n\n// Create an axios instance\nconst http = axios.create({\n  baseURL: 'http://localhost:5000/api' // your api url\n});\n\n// Add a request interceptor\nhttp.interceptors.request.use(config => {\n  // Get the access token from the local storage\n  const token = localStorageService.getAccessToken();\n  // If the token exists, set it in the header\n  if (token) {\n    config.headers['Authorization'] = 'Bearer ' + token;\n  }\n  return config;\n}, error => {\n  // Handle the error\n  return Promise.reject(error);\n});\n\n// Add a response interceptor\nhttp.interceptors.response.use(response => {\n  // Return the response\n  return response;\n}, error => {\n  // Get the error status\n  const status = error.response ? error.response.status : null;\n  // If the status is 401, the token is expired or invalid\n  if (status === 401) {\n    // Remove the token from the local storage\n    localStorageService.removeToken();\n    // Redirect to the login page\n    window.location.href = '/login';\n  }\n  // Handle the error\n  return Promise.reject(error);\n});\n\n// Define the auth service\nconst authService = {\n  // Sign up method\n  async signup(user) {\n    try {\n      // Send a post request to the signup endpoint\n      const response = await http.post('/users/signup', user);\n      // Return the response data\n      return response.data;\n    } catch (error) {\n      // Throw the error\n      throw error;\n    }\n  },\n  // Log in method\n  async login(user) {\n    try {\n      // Send a post request to the login endpoint\n      const response = await http.post('/users/login', user);\n      // Get the access token and the user data from the response\n      const {\n        accessToken,\n        user: userData\n      } = response.data;\n      // Set the token in the local storage\n      localStorageService.setToken(accessToken);\n      // Return the user data\n      return userData;\n    } catch (error) {\n      // Throw the error\n      throw error;\n    }\n  },\n  // Log out method\n  logout() {\n    // Remove the token from the local storage\n    localStorageService.removeToken();\n    // Redirect to the login page\n    window.location.href = '/login';\n  },\n  // Get current user method\n  async getCurrentUser() {\n    try {\n      // Send a get request to the profile endpoint\n      const response = await http.get('/users/profile');\n      // Return the user data\n      return response.data;\n    } catch (error) {\n      // Throw the error\n      throw error;\n    }\n  }\n};\n\n// Export the auth service\nexport default authService;","map":{"version":3,"names":["axios","http","create","baseURL","interceptors","request","use","config","token","localStorageService","getAccessToken","headers","error","Promise","reject","response","status","removeToken","window","location","href","authService","signup","user","post","data","login","accessToken","userData","setToken","logout","getCurrentUser","get"],"sources":["C:/Users/vmarturx/Videos/int/client/src/services/auth.service.js"],"sourcesContent":["// Import axios and local storage\r\nimport axios from 'axios';\r\n//import localStorageService from './local-storage.service';\r\n\r\n// Create an axios instance\r\nconst http = axios.create({\r\n  baseURL: 'http://localhost:5000/api' // your api url\r\n});\r\n\r\n// Add a request interceptor\r\nhttp.interceptors.request.use(\r\n  (config) => {\r\n    // Get the access token from the local storage\r\n    const token = localStorageService.getAccessToken();\r\n    // If the token exists, set it in the header\r\n    if (token) {\r\n      config.headers['Authorization'] = 'Bearer ' + token;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    // Handle the error\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Add a response interceptor\r\nhttp.interceptors.response.use(\r\n  (response) => {\r\n    // Return the response\r\n    return response;\r\n  },\r\n  (error) => {\r\n    // Get the error status\r\n    const status = error.response ? error.response.status : null;\r\n    // If the status is 401, the token is expired or invalid\r\n    if (status === 401) {\r\n      // Remove the token from the local storage\r\n      localStorageService.removeToken();\r\n      // Redirect to the login page\r\n      window.location.href = '/login';\r\n    }\r\n    // Handle the error\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Define the auth service\r\nconst authService = {\r\n  // Sign up method\r\n  async signup(user) {\r\n    try {\r\n      // Send a post request to the signup endpoint\r\n      const response = await http.post('/users/signup', user);\r\n      // Return the response data\r\n      return response.data;\r\n    } catch (error) {\r\n      // Throw the error\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Log in method\r\n  async login(user) {\r\n    try {\r\n      // Send a post request to the login endpoint\r\n      const response = await http.post('/users/login', user);\r\n      // Get the access token and the user data from the response\r\n      const { accessToken, user: userData } = response.data;\r\n      // Set the token in the local storage\r\n      localStorageService.setToken(accessToken);\r\n      // Return the user data\r\n      return userData;\r\n    } catch (error) {\r\n      // Throw the error\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Log out method\r\n  logout() {\r\n    // Remove the token from the local storage\r\n    localStorageService.removeToken();\r\n    // Redirect to the login page\r\n    window.location.href = '/login';\r\n  },\r\n\r\n  // Get current user method\r\n  async getCurrentUser() {\r\n    try {\r\n      // Send a get request to the profile endpoint\r\n      const response = await http.get('/users/profile');\r\n      // Return the user data\r\n      return response.data;\r\n    } catch (error) {\r\n      // Throw the error\r\n      throw error;\r\n    }\r\n  }\r\n};\r\n\r\n// Export the auth service\r\nexport default authService;\r\n"],"mappings":"AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;AACzB;;AAEA;AACA,MAAMC,IAAI,GAAGD,KAAK,CAACE,MAAM,CAAC;EACxBC,OAAO,EAAE,2BAA2B,CAAC;AACvC,CAAC,CAAC;;AAEF;AACAF,IAAI,CAACG,YAAY,CAACC,OAAO,CAACC,GAAG,CAC1BC,MAAM,IAAK;EACV;EACA,MAAMC,KAAK,GAAGC,mBAAmB,CAACC,cAAc,CAAC,CAAC;EAClD;EACA,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACI,OAAO,CAAC,eAAe,CAAC,GAAG,SAAS,GAAGH,KAAK;EACrD;EACA,OAAOD,MAAM;AACf,CAAC,EACAK,KAAK,IAAK;EACT;EACA,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACAX,IAAI,CAACG,YAAY,CAACW,QAAQ,CAACT,GAAG,CAC3BS,QAAQ,IAAK;EACZ;EACA,OAAOA,QAAQ;AACjB,CAAC,EACAH,KAAK,IAAK;EACT;EACA,MAAMI,MAAM,GAAGJ,KAAK,CAACG,QAAQ,GAAGH,KAAK,CAACG,QAAQ,CAACC,MAAM,GAAG,IAAI;EAC5D;EACA,IAAIA,MAAM,KAAK,GAAG,EAAE;IAClB;IACAP,mBAAmB,CAACQ,WAAW,CAAC,CAAC;IACjC;IACAC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,QAAQ;EACjC;EACA;EACA,OAAOP,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACA,MAAMS,WAAW,GAAG;EAClB;EACA,MAAMC,MAAMA,CAACC,IAAI,EAAE;IACjB,IAAI;MACF;MACA,MAAMR,QAAQ,GAAG,MAAMd,IAAI,CAACuB,IAAI,CAAC,eAAe,EAAED,IAAI,CAAC;MACvD;MACA,OAAOR,QAAQ,CAACU,IAAI;IACtB,CAAC,CAAC,OAAOb,KAAK,EAAE;MACd;MACA,MAAMA,KAAK;IACb;EACF,CAAC;EAED;EACA,MAAMc,KAAKA,CAACH,IAAI,EAAE;IAChB,IAAI;MACF;MACA,MAAMR,QAAQ,GAAG,MAAMd,IAAI,CAACuB,IAAI,CAAC,cAAc,EAAED,IAAI,CAAC;MACtD;MACA,MAAM;QAAEI,WAAW;QAAEJ,IAAI,EAAEK;MAAS,CAAC,GAAGb,QAAQ,CAACU,IAAI;MACrD;MACAhB,mBAAmB,CAACoB,QAAQ,CAACF,WAAW,CAAC;MACzC;MACA,OAAOC,QAAQ;IACjB,CAAC,CAAC,OAAOhB,KAAK,EAAE;MACd;MACA,MAAMA,KAAK;IACb;EACF,CAAC;EAED;EACAkB,MAAMA,CAAA,EAAG;IACP;IACArB,mBAAmB,CAACQ,WAAW,CAAC,CAAC;IACjC;IACAC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,QAAQ;EACjC,CAAC;EAED;EACA,MAAMW,cAAcA,CAAA,EAAG;IACrB,IAAI;MACF;MACA,MAAMhB,QAAQ,GAAG,MAAMd,IAAI,CAAC+B,GAAG,CAAC,gBAAgB,CAAC;MACjD;MACA,OAAOjB,QAAQ,CAACU,IAAI;IACtB,CAAC,CAAC,OAAOb,KAAK,EAAE;MACd;MACA,MAAMA,KAAK;IACb;EACF;AACF,CAAC;;AAED;AACA,eAAeS,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}